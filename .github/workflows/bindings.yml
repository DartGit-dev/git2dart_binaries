name: Generate bindings

on:
  push:
    # tags:
    # - "v[0-9]+.[0-9]+.[0-9]+*"
    branches:
      # - "main"
      - "**"
env:
  PUB_ENVIRONMENT: bot.github
  LIBGIT2_VERSION: "1.9.0"
  LIBSSH2_VERSION: "1.11.1"
  NDK_VERSION: "r26c"
jobs:

  generate_bindings:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: libgit2/libgit2
          ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
          path: ./libgit2
      - run: mv ./libgit2/include ./headers && rm -fR ./libgit2

      - name: Install libclang
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends libclang-dev
      - name: Run ffigen
        uses: subosito/flutter-action@v2
      - run:  flutter pub get
      - run:  rm headers/git2/deprecated.h
      - run:  dart run ffigen --config ffigen.yaml --ignore-source-errors
    # - run:  flutter test
      - name: Cache git2 library
        uses: actions/upload-artifact@v4
        with:
          name: cache-bindings
          path: lib/src/bindings.dart

   
  build_libgit2_android:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        abi: [ "armeabi-v7a", "arm64-v8a", "x86_64" ]
        api: [ "21" ] # минимальный уровень API

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Android NDK ${{ env.NDK_VERSION }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.NDK_VERSION }}

      - name: Add NDK toolchain to PATH
        run: |
          echo "$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Set cross‑compile variables
        id: vars
        run: |
          case "${{ matrix.abi }}" in
            "armeabi-v7a")   triplet="armv7a-linux-androideabi" ;;
            "arm64-v8a")    triplet="aarch64-linux-android" ;;
            "x86_64")       triplet="x86_64-linux-android" ;;
          esac
          echo "triplet=$triplet" >> "$GITHUB_OUTPUT"
          echo "cc=$triplet${{ matrix.api }}-clang" >> "$GITHUB_OUTPUT"

      - name: Configure
        working-directory: openssh2
        run: |
          ./configure \
            --host=${{ steps.vars.outputs.triplet }} \
            CC=${{ steps.vars.outputs.cc }} \
            --disable-strip \
            --with-ssl-dir=$GITHUB_WORKSPACE/openssl-android \
            --prefix=/opt/openssh2/${{ matrix.abi }}

      - name: Build
        working-directory: openssh2
        run: |
          make -j$(nproc)

      - name: Install to staging
        working-directory: openssh2
        run: |
          make DESTDIR=$PWD/../out install

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openssh2-${{ matrix.abi }}
          path: openssh2/out/opt/openssh2/${{ matrix.abi }}
    # steps:
    #   - name: Run prerequistes
    #     run: |
    #       sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends clang cmake curl libssl-dev
    #       mkdir /tmp/export

    #   - uses: actions/checkout@v4
    #     with:
    #       repository: libssh2/libssh2
    #       ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}
    #       path: ./libssh2
    #   - run: |
    #       mv ./libssh2 /tmp/libssh2 && cd /tmp/libssh2
    #       mkdir -p /usr/local/share/doc

    #       cmake -B bld -DCRYPTO_BACKEND=OpenSSL  -DCMAKE_INSTALL_PREFIX=/tmp/libssh2/install
    #       cmake --build bld --target install
    #       cp  /tmp/libssh2/install/lib/libssh2.so /tmp/export/libssh2.so
    #   - uses: actions/checkout@v4
    #     with:
    #       repository: libgit2/libgit2
    #       ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
    #       path: ./libgit2
    #   - name: Build and test
    #     run: |
    #       mv ./libgit2 /tmp/libgit2
    #       cd /tmp/libgit2
    #       cmake -B bld -DUSE_SSH=libssh2 -DBUILD_TESTS=ON  -DEXPERIMENTAL_SHA256=ON -DCMAKE_INSTALL_PREFIX=/tmp/libgit2/install -DLIBSSH2_INCLUDE_DIR=/tmp/libssh2/install/include -DLIBSSH2_LIBRARY=/tmp/libssh2/install/lib/libssh2.so
    #       cmake --build bld --target install
    #       ./bld/libgit2_tests

    #   - name: Export git2 library
    #     run: |
    #       cp /tmp/libgit2/install/lib/libgit2-experimental.so /tmp/export/libgit2.so
    #   - name: Cache git2 library
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: cache-linux
    #       path: /tmp/export/**
