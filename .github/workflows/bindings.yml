name: Generate bindings

on:
  push:
    # tags:
    # - "v[0-9]+.[0-9]+.[0-9]+*"
    branches:
      # - "main"
      - "**"
env:
  PUB_ENVIRONMENT: bot.github
  LIBGIT2_VERSION: "1.9.0"
  LIBSSH2_VERSION: "1.11.1"
  NDK_VERSION: "r26c"
  OPENSSL_VERSION: 3.2.0
jobs:

  # generate_bindings:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v4

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: libgit2/libgit2
  #         ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
  #         path: ./libgit2
  #     - run: mv ./libgit2/include ./headers && rm -fR ./libgit2

  #     - name: Install libclang
  #       run: |
  #         sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends libclang-dev
  #     - name: Run ffigen
  #       uses: subosito/flutter-action@v2
  #     - run:  flutter pub get
  #     - run:  rm headers/git2/deprecated.h
  #     - run:  dart run ffigen --config ffigen.yaml --ignore-source-errors
  #   # - run:  flutter test
  #     - name: Cache git2 library
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-bindings
  #         path: lib/src/bindings.dart

   
  build_libgit2_android:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        abi: [armeabi-v7a]
        # abi: [armeabi-v7a, arm64-v8a, x86, x86_64]
        api: [21]


    steps:
  # --- Подготовка среды --------------------------------------------------
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        repository: libssh2/libssh2
        ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}

    - name: Install build deps (perl, make, etc.)
      run: sudo apt-get update && sudo apt-get install -y perl build-essential

    - name: Set up Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26c
        add-to-path: true

    # --- Сборка OpenSSL ----------------------------------------------------
    - name: Build & install OpenSSL (${{ matrix.abi }})
      run: |
        mkdir  openssl && cd openssl  

        curl -O https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
        tar xzf openssl-${OPENSSL_VERSION}.tar.gz
        cd openssl-${OPENSSL_VERSION}

        # Определяем TARGET для конфигуратора
        case "${{ matrix.abi }}" in
          arm64-v8a)  TARGET=android-arm64;;
          armeabi-v7a) TARGET=android-arm;;
          x86)         TARGET=android-x86;;
          x86_64)      TARGET=android-x86_64;;
        esac

        ./Configure $TARGET no-shared no-tests --prefix=$PREFIX_ROOT/${{ matrix.abi }}
        make -j$(nproc)
        make install_sw

    # --- Сборка libssh2 ----------------------------------------------------
    - name: Configure & build libssh2 (${{ matrix.abi }})
      run: |
        cmake -S libssh2 -B $BUILD_DIR/libssh2/${{ matrix.abi }} \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.abi }} \
          -DANDROID_PLATFORM=android-${{ matrix.api }} \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_SHARED_LIBS=OFF \
          -DENABLE_ZLIB_COMPRESSION=ON \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_TESTING=OFF \
          -DLIBSSH2_WITH_OPENSSL=ON \
          -DOPENSSL_ROOT_DIR=$PREFIX_ROOT/${{ matrix.abi }} \
          -DOPENSSL_INCLUDE_DIR=$PREFIX_ROOT/${{ matrix.abi }}/include \
          -DOPENSSL_SSL_LIBRARY=$PREFIX_ROOT/${{ matrix.abi }}/lib/libssl.a \
          -DOPENSSL_CRYPTO_LIBRARY=$PREFIX_ROOT/${{ matrix.abi }}/lib/libcrypto.a

        cmake --build $BUILD_DIR/libssh2/${{ matrix.abi }} --config Release -j$(nproc)

    # --- Публикация артефактов --------------------------------------------
    - name: Upload artifact (libssh2 + OpenSSL ${{ matrix.abi }})
      uses: actions/upload-artifact@v4
      with:
        name: libssh2-openssl-${{ matrix.abi }}
        path: |
          $BUILD_DIR/libssh2/${{ matrix.abi }}/src/libssh2.a
          $PREFIX_ROOT/${{ matrix.abi }}/lib/libssl.a
          $PREFIX_ROOT/${{ matrix.abi }}/lib/libcrypto.a
          $PREFIX_ROOT/${{ matrix.abi }}/include



          
      # - name: Checkout sources
      #   uses: actions/checkout@v4
      #   with:
      #     repository: libssh2/libssh2
      #     ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}
      #     path: ./libssh2

      # - name: Set up Android NDK ${{ env.NDK_VERSION }}
      #   uses: nttld/setup-ndk@v1
      #   with:
      #     ndk-version: ${{ env.NDK_VERSION }}
      #     add-to-path: true

      #           # Конфигурация и сборка
      # - name: Configure & Build libssh2 (${{ matrix.abi }})
      #   run: |
      #     cd libssh2
      #     mkdir -p build/${{ matrix.abi }}
      #     cmake -S . -B build/${{ matrix.abi }} \
      #     -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
      #     -DANDROID_ABI=${{ matrix.abi }} \
      #     -DANDROID_PLATFORM=android-${{ matrix.api }} \
      #     -DBUILD_SHARED_LIBS=OFF \
      #     -DENABLE_ZLIB_COMPRESSION=ON \
      #     -DBUILD_EXAMPLES=OFF \
      #     -DBUILD_TESTING=OFF \
      #     -DCMAKE_BUILD_TYPE=Release
      #     cmake --build build/${{ matrix.abi }} --config Release -j$(nproc)

   
    # steps:
    #   - name: Run prerequistes
    #     run: |
    #       sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends clang cmake curl libssl-dev
    #       mkdir /tmp/export

    #   - uses: actions/checkout@v4
    #     with:
    #       repository: libssh2/libssh2
    #       ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}
    #       path: ./libssh2
    #   - run: |
    #       mv ./libssh2 /tmp/libssh2 && cd /tmp/libssh2
    #       mkdir -p /usr/local/share/doc

    #       cmake -B bld -DCRYPTO_BACKEND=OpenSSL  -DCMAKE_INSTALL_PREFIX=/tmp/libssh2/install
    #       cmake --build bld --target install
    #       cp  /tmp/libssh2/install/lib/libssh2.so /tmp/export/libssh2.so
    #   - uses: actions/checkout@v4
    #     with:
    #       repository: libgit2/libgit2
    #       ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
    #       path: ./libgit2
    #   - name: Build and test
    #     run: |
    #       mv ./libgit2 /tmp/libgit2
    #       cd /tmp/libgit2
    #       cmake -B bld -DUSE_SSH=libssh2 -DBUILD_TESTS=ON  -DEXPERIMENTAL_SHA256=ON -DCMAKE_INSTALL_PREFIX=/tmp/libgit2/install -DLIBSSH2_INCLUDE_DIR=/tmp/libssh2/install/include -DLIBSSH2_LIBRARY=/tmp/libssh2/install/lib/libssh2.so
    #       cmake --build bld --target install
    #       ./bld/libgit2_tests

    #   - name: Export git2 library
    #     run: |
    #       cp /tmp/libgit2/install/lib/libgit2-experimental.so /tmp/export/libgit2.so
    #   - name: Cache git2 library
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: cache-linux
    #       path: /tmp/export/**
