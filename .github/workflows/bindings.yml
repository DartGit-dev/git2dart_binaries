name: Generate bindings

on:
  push:
    # tags:
    # - "v[0-9]+.[0-9]+.[0-9]+*"
    branches:
      - "main"
      # - "**"
env:
  PUB_ENVIRONMENT: bot.github
  LIBGIT2_VERSION: "1.9.0"

jobs:
  # build_libgit2_ubuntu:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Update dependencies
  #       run: |
  #         sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends clang cmake curl libgcrypt20-dev
    
  #     - uses: actions/checkout@v3
  #       with:
  #         repository: libgit2/libgit2
  #         ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
  #         path: ./libgit2
  #     - name: Build and test
  #       run: |
  #         mv libgit2 /tmp/libgit2
  #         cd /tmp/libgit2
  #         mkdir ./build && cd build
  #         cmake -DUSE_SSH=exec -DBUILD_TESTS=OFF ..
  #         cmake --build .
  #     - name: Cache headers
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-headers
  #         path: /tmp/libgit2/include

  #     - name: Export git2 library
  #       run: |
  #         mkdir /tmp/libgit2/export
  #         cp /tmp/libgit2/build/libgit2.so /tmp/libgit2/export/libgit2-${{ env.LIBGIT2_VERSION }}.so
  #     - name: Cache git2 library
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-linux
  #         path: /tmp/libgit2/export/**

  build_libgit2_windows:
    runs-on: windows-2019
    env:
      ARCH: amd64
      CMAKE_GENERATOR: Visual Studio 16 2019
      CMAKE_OPTIONS: -A x64 -DCMAKE_BUILD_TYPE="Release" -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF  -DUSE_SSH=exec =
      BUILD_PATH: C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\CMake\bin;
      BUILD_TEMP: D:\Temp
      SKIP_SSH_TESTS: true
      SKIP_NEGOTIATE_TESTS: true
    steps:
      - uses: actions/checkout@v3
        with:
          repository: libgit2/libgit2
          ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
          path: source

      - name: Set up build environment
        run: source/ci/setup-win32-build.sh
        shell: bash

      - name: Build
        run: |
          cd source
          mkdir build && cd build
          cmake   ..
          cmake --build .

      - name: Export git2 library
        run: |
          mkdir export
          cp build/Debug/git2.dll export/libgit2-${{ env.LIBGIT2_VERSION }}.dll
  
      - name: Cache git2 library
        uses: actions/upload-artifact@v4
        with:
          name: cache-windows
          path: export/**

  # build_libgit2_macos:
  #   runs-on: macos-11
  #   env:
  #     CC: clang
  #     CMAKE_OPTIONS: -DREGEX_BACKEND=regcomp_l -DDEPRECATE_HARD=ON  -DBUILD_EXAMPLES=OFF -DUSE_SSH=ON -DUSE_GSSAPI=ON
  #     PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig
  #     SKIP_SSH_TESTS: true
  #     SKIP_NEGOTIATE_TESTS: true
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         repository: libgit2/libgit2
  #         ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
  #         path: source

  #     - name: Set up build environment
  #       run: source/ci/setup-osx-build.sh
  #       shell: bash

  #     - name: Build and test
  #       run: |
  #         mkdir build
  #         cd build
  #         ../source/ci/build.sh
  #       shell: bash

  #     - name: Export git2 library
  #       run: |
  #         mkdir export
  #         cp build//libgit2.dylib export/libgit2-${{ env.LIBGIT2_VERSION }}.dylib

  #     - name: Cache git2 library
  #       uses: actions/upload-artifact@master
  #       with:
  #         name: cache-macos
  #         path: export/**

  generate_bindings:
    # needs: [build_libgit2_ubuntu, build_libgit2_windows]
    # needs: [build_libgit2_ubuntu]
    needs: [build_libgit2_windows]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # - name: Save headers
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: ./headers
      #     name: cache-headers

      - name: Save windows binaries
        uses: actions/download-artifact@master
        with:
          path: ./windows
          name: cache-windows

      # - name: Save macos binaries
      #   uses: actions/download-artifact@master
      #   with:
      #     path: ./macos
      #     name: cache-macos

      # - name: Install libclang
      #   run: |
      #     sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends libclang-dev

      # - name: Install flutter
      #   uses: subosito/flutter-action@v2

      # - name: Install dependencies
      #   run:  flutter pub get
        
      # - name: Save linux binaries
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: ./linux
      #     name: cache-linux

      # - name: Generate bindings
      #   run: 
      #     dart run ffigen --config ffigen.yaml

      # - name: Remove headers folder
      #   run: rm -fr headers

      # - name: Publish
      #   uses: k-paxian/dart-package-publisher@master
      #   with:
      #     credentialJson: ${{ secrets.CREDENTIALS_JSON }}
      #     skipTests: true
      #     suppressBuildRunner: true
      #     flutter: true

  # - name: Create Release
  #   id: create_release
  #   uses: actions/create-release@latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #   with:
  #     tag_name: ${{ github.ref }}
  #     release_name: Release ${{ github.ref }}
  #     body: |
  #       ${{ steps.Changelog.outputs.changelog }}
  #     draft: false
  #     prerelease: false
