name: Generate bindings

on:
  push:
    # tags:
    # - "v[0-9]+.[0-9]+.[0-9]+*"
    branches:
      - "main"
      # - "**"
env:
  PUB_ENVIRONMENT: bot.github
  LIBGIT2_VERSION: "1.9.0"
  # GLIB_VERSION: "2.38"
  LIBSSH2_VERSION: "1.11.1"

jobs:
  # build_libgit2_ubuntu:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Run prerequistes
  #       run: |
  #         sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends clang cmake curl libssl-dev
  #         mkdir /tmp/export

  #     - uses: actions/checkout@v3
  #       with:
  #         repository: libssh2/libssh2
  #         ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}
  #         path: ./libssh2
  #     - run: |
  #         mv ./libssh2 /tmp/libssh2 && cd /tmp/libssh2
  #         mkdir -p /usr/local/share/doc

  #         cmake -B bld -DCRYPTO_BACKEND=OpenSSL  -DCMAKE_INSTALL_PREFIX=/tmp/libssh2/install
  #         cmake --build bld --target install
  #         cp  /tmp/libssh2/install/lib/libssh2.so /tmp/export/libssh2.so

  #     # - name: install glib
  #     #   run: |

  #     #     mkdir /tmp/glibc
  #     #     cd /tmp/glibc


  #     #     wget https://ftp.gnu.org/gnu/glibc/glibc-$GLIB_VERSION.tar.gz
  #     #     tar -xf glibc-$GLIB_VERSION.tar.gz 

  #     #     cd glibc-$GLIB_VERSION

  #     #     mkdir install && cd install
  #     #     ../configure --prefix=/tmp/glibc/install
  #     #     make
  #     #     make install

  #     - uses: actions/checkout@v3
  #       with:
  #         repository: libgit2/libgit2
  #         ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
  #         path: ./libgit2
  #     - name: Build and test
  #       run: |
  #         mv ./libgit2 /tmp/libgit2
  #         cd /tmp/libgit2
  #         cmake -B bld -DUSE_SSH=libssh2 -DBUILD_TESTS=ON  -DEXPERIMENTAL_SHA256=ON -DCMAKE_INSTALL_PREFIX=/tmp/libgit2/install -DLIBSSH2_INCLUDE_DIR=/tmp/libssh2/install/include -DLIBSSH2_LIBRARY=/tmp/libssh2/install/lib/libssh2.so
  #         cmake --build bld --target install
  #         ./bld/libgit2_tests
  #     - name: Cache headers
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-headers
  #         path: /tmp/libgit2/include

  #     - name: Export git2 library
  #       run: |
  #         cp /tmp/libgit2/install/lib/libgit2-experimental.so /tmp/export/libgit2.so
  #     - name: Cache git2 library
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-linux
  #         path: /tmp/export/**

  build_libgit2_windows:
    runs-on: windows-2019
    env:
      ARCH: amd64
      CMAKE_OPTIONS: -A x64 
      BUILD_PATH: C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\CMake\bin;
      BUILD_TEMP: D:\Temp
    steps:
      - name: Install dependencies
        run: |
          choco install openssl cmake

      - name: Checkout libssh2
        uses: actions/checkout@v3
        with:
          repository: libssh2/libssh2
          ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}
          path: ./libssh2

      - name: Build libssh2
        run: |
          cd libssh2
          mkdir build
          cd build
          cmake -DCRYPTO_BACKEND=OpenSSL -DCMAKE_INSTALL_PREFIX=D:/libssh2/install ..
          cmake --build . --config Release --target install
          mkdir -p D:/export
          copy D:/libssh2/install/bin/libssh2.dll D:/export/libssh2.dll

      - name: Checkout libgit2
        uses: actions/checkout@v3
        with:
          repository: libgit2/libgit2
          ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
          path: ./libgit2

      - name: Build libgit2
        run: |
          cd libgit2
          mkdir build
          cd build
          cmake -DUSE_SSH=libssh2 -DBUILD_TESTS=ON -DEXPERIMENTAL_SHA256=ON -DCMAKE_INSTALL_PREFIX=D:/libgit2/install -DLIBSSH2_INCLUDE_DIR=D:/libssh2/install/include -DLIBSSH2_LIBRARY=D:/libssh2/install/lib/libssh2.lib ..
          cmake --build . --config Release --target install
          .\Release\libgit2_tests.exe

      - name: Cache headers
        uses: actions/upload-artifact@v4
        with:
          name: cache-headers
          path: D:/libgit2/include

      - name: Export git2 library
        run: |
          mkdir export
          copy D:\libgit2\install\lib\libgit2-experimental.dll export\libgit2.dll

      - name: Cache git2 library
        uses: actions/upload-artifact@v4
        with:
          name: cache-windows
          path: export/**

  # build_libgit2_macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Install dependencies
  #       run: |
  #         brew install openssl cmake

  #     - name: Checkout libssh2
  #       uses: actions/checkout@v3
  #       with:
  #         repository: libssh2/libssh2
  #         ref: refs/tags/libssh2-${{ env.LIBSSH2_VERSION }}
  #         path: ./libssh2

  #     - name: Build libssh2
  #       run: |
  #         cd libssh2
  #         mkdir -p build && cd build
  #         cmake -DCRYPTO_BACKEND=OpenSSL -DCMAKE_INSTALL_PREFIX=/tmp/libssh2/install ..
  #         cmake --build . --target install
  #         mkdir -p /tmp/export
  #         cp /tmp/libssh2/install/lib/libssh2.dylib /tmp/export/libssh2.dylib

  #     - name: Checkout libgit2
  #       uses: actions/checkout@v3
  #       with:
  #         repository: libgit2/libgit2
  #         ref: refs/tags/v${{ env.LIBGIT2_VERSION }}
  #         path: ./libgit2

  #     - name: Build libgit2
  #       run: |
  #         cd libgit2
  #         mkdir -p build && cd build
  #         cmake -DUSE_SSH=libssh2 \
  #               -DBUILD_TESTS=ON \
  #               -DEXPERIMENTAL_SHA256=ON \
  #               -DCMAKE_INSTALL_PREFIX=/tmp/libgit2/install \
  #               -DLIBSSH2_INCLUDE_DIR=/tmp/libssh2/install/include \
  #               -DLIBSSH2_LIBRARY=/tmp/libssh2/install/lib/libssh2.dylib \
  #               ..
  #         cmake --build . --target install
  #         ./libgit2_tests

  #     - name: Cache headers
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-headers
  #         path: /tmp/libgit2/include

  #     - name: Export git2 library
  #       run: |
  #         mkdir -p export
  #         cp /tmp/libgit2/install/lib/libgit2-experimental.dylib export/libgit2.dylib

  #     - name: Cache git2 library
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: cache-macos
  #         path: export/**

  generate_bindings:
    # needs: [build_libgit2_ubuntu, build_libgit2_windows, build_libgit2_macos]
    needs: [build_libgit2_windows]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Save headers
        uses: actions/download-artifact@v4
        with:
          path: ./headers
          name: cache-headers

      # - name: Save windows binaries
      #   uses: actions/download-artifact@master
      #   with:
      #     path: ./windows
      #     name: cache-windows

      # - name: Save macos binaries
      #   uses: actions/download-artifact@master
      #   with:
      #     path: ./macos
      #     name: cache-macos

      # - name: Save linux binaries
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: ./linux
      #     name: cache-linux

      - name: Install libclang
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update -o Acquire::Retries=3 && sudo DEBIAN_FRONTEND=noninteractive apt-get install  -o Acquire::Retries=3 -y --no-install-recommends libclang-dev
     

      - name: Run ffigen
        uses: subosito/flutter-action@v2
      - run:  flutter pub get
      - run:  rm headers/git2/deprecated.h
      - run:  dart run ffigen --config ffigen.yaml --ignore-source-errors
      - run:  flutter test

      - name: Publish package
        uses: k-paxian/dart-package-publisher@master
        with:
          accessToken: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
          refreshToken: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
          skipTests: true

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@latest
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       ${{ steps.Changelog.outputs.changelog }}
    #     draft: false
    #     prerelease: false
